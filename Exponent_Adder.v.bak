module Exponent_Adder(
input clk,
input Load,
input Inc,
input Dec,
input SM8,
input [2:0] E1,
input [2:0] E2,
output [2:0] E
);

reg [3:0] X,A1,B1;
reg [2:0] Y;
wire [3:0] A,B,S;
wire Co;

initial
begin 
X<=0;
Y<=0;
A1<=0;
B1<=0;
end 

always @(posedge clk)
begin
if(Load)
begin 
	X[3] <= E1[2];
	X[2] <= E1[2];
	X[1] <= E1[1];
	X[0] <= E1[0];
	Y <= E2;
end 
else 
begin
	if(Inc | Dec | SM8)
	begin
		if(Inc)
		X<=X+1;
		else if(Dec)
		X<=X-1;
		else if(SM8)
		X<=4'b1100;
	end
	else 
		X <= S;
end 
end
always @(posedge clk)
begin
if(Load)
begin 
	A1 <= X;
	B1 <= {Y[2],Y};
end
else
begin
	A1<=A1;
	B1<=B1;
end
end

assign A = A1;
assign B = B1;
assign E = (!Load) ? X;
Adder4 A0 (S,Co,A,B,1'b0);


endmodule 